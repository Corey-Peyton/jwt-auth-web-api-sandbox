####################################################################
###  COMMANDES POUR LA GENERATION DE CLEFS ET CERTIFICATS : KEYTOOL
####################################################################

cd "G:\Workspace_STS_Gitlab\jwt-auth-web-api-sandbox\jwt-auth-web-api-back-end\src\main\resources\crypto"

keytool -genkeypair -dname "CN=server.tuto.vincent.fr,OU=IT,O=OVIOK Group,L=ANTIBES,S=ALPES MARITIMES,C=FR" -alias my-app-recette -keyalg RSA -keysize 4096 -keypass my-app-recette -validity  3650 -storetype JKS -keystore my-app-recette-keystore.jks -storepass my-app-recette -file my-app-recette-keystore.jks

####################################
######### Export de la clé publique
####################################
L'export de la clé publique et du certificat dans un fichier à partir du JKS est effectué par la commande suivante :

keytool -list -rfc --keystore my-app-recette-keystore.jks | openssl x509 -inform pem -pubkey -out my-app-recette.txt
Enter keystore password:  my-app-recette

#####
à partir du fichier 'my-app-recette.txt' créer lee fichiers suivants :
	- my-app-recette-publicKey.txt --> contient uniquement que la clé publique (on supprime le bloc de certificat).
	- my-app-recette.cer --> contient uniquement que le certificat X509 (on supprime le bloc de la clé publique).

### Uniquement la clé publique mais pas dans un fichier (il suffit ensuite de le copier et coller dans un fichier texte par exemple)
keytool -list -rfc --keystore my-app-recette-keystore.jks | openssl x509 -inform pem -pubkey -noout 
Enter keystore password:  my-app-recette

####################################
######### Export au format PKCS12
####################################
# keytool -v -importkeystore -srckeystore my-app-recette-keystore.jks -destkeystore my-app-recette.p12 -deststoretype pkcs12

# Avec le mot de passe de la source --> Confirmer avec le mot de passe de la clé privée 
keytool -v -importkeystore -srckeystore my-app-recette-keystore.jks -srcstoretype JKS -srcalias my-app-recette -srckeypass my-app-recette -destkeystore my-app-recette.p12 -deststoretype PKCS12 -destalias my-app-recette -deststorepass my-app-recette

# Sans le mot de passe de la source --> Confirmer avec le mot de passe de la clé privéé
keytool -v -importkeystore -srckeystore my-app-recette-keystore.jks -srcstoretype JKS -srcalias my-app-recette -destkeystore my-app-recette.p12 -deststoretype PKCS12 -destalias my-app-recette -deststorepass my-app-recette


###############
###  OPENSSL 
###############
Lors de l'utilisation du jeton JWT pour l'authentification / l'autorisation de microservice, il est conseillé de signer avec des clés privées/publiques RSA
au lieu d'utiliser le secret HMAC partagé. Le jeton est généré et signé par une autorité centrale (généralement un serveur d'autorisation) 
et chaque microservice peut valider le jeton JWT à l'aide de la clé publique exposée à partir du serveur d'autorisation.

Avant de voir comment générer un jeton JWT avec une clé privée/publique, voyons comment générer une paire de clés RSA privée et publique avec OpenSSL.

-----------------------------------------
Générer une clé RSA privée et publique
-----------------------------------------

---------------------------------------------------------------------------------------------
1°) Générer une clé privée RSA, de taille 4096, et exportez-la dans un fichier nommé key.pem
---------------------------------------------------------------------------------------------
$ openssl genrsa -out key.pem 4096

---------------------------------------------------------------------------------------------
2°) Extraire la clé publique de la paire de clés, qui peut être utilisée dans un certificat
---------------------------------------------------------------------------------------------
$ openssl rsa -in key.pem -outform PEM -pubout -out public.pem

(!) : Le fichier key.pem contient la clé privée générée à l'aide de RSA et le fichier public.pem contient la clé publique.

/!\ : Lire une clé dans un fichier au format DER (.der) car le format PEM (.key) généré à partir d'OpenSSL n'est pas accepté par l'API Java.
