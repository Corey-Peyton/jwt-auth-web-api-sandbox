############################################################
### CONFIGURATION MIGRATION DE BASES DE DONNEES AVEC FLYWAY
############################################################
spring.flyway.enabled=false
spring.flyway.group=true
spring.flyway.baseline-on-migrate=true
spring.flyway.sql-migration-prefix=V
spring.flyway.sql-migration-separator=__
spring.flyway.sql-migration-suffixes=.sql

#spring.flyway.locations=classpath:db/migration
#spring.flyway.locations=filesystem:db/migration
#spring.flyway.locations=filesystem:docs/db/migration

#spring.flyway.repeatable-sql-migration-prefix=R
#spring.flyway.schemas=public
#spring.flyway.check-location=true

###################################
### APPLICATION CUSTOM PROPERTIES
###################################
#datasource-props props custom
vot.datasource-props.type=com.zaxxer.hikari.HikariDataSource
vot.datasource-props.driver-class-name=org.h2.Driver
vot.datasource-props.url=jdbc:h2:mem:security_permission;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
vot.datasource-props.jdbcUrl=${vot.datasource-props.url}
vot.datasource-props.datasource-class-name=org.h2.jdbcx.JdbcDataSource
vot.datasource-props.user-name=sa
vot.datasource-props.password=
vot.datasource-props.test-while-idle =true
vot.datasource-props.validation-query =SELECT 1
vot.datasource-props.pool-prepared-statements=true
vot.datasource-props.max-open-prepared-statements=250
vot.datasource-props.persistence-unit-name=JwtRestSecureServerPUTest
vot.datasource-props.package-to-scan=fr.vincent.tuto.server.model.po
vot.datasource-props.generate-ddl=false
vot.datasource-props.platform=H2

# Customisation des propriétés de la DS pour le gestionnaire de pools Hikari
vot.datasource-props.cache-prepare-statements=cachePrepStmts
vot.datasource-props.prepare-statement-cache-size=prepStmtCacheSize
vot.datasource-props.prepare-statement-cache-sql-limit=prepStmtCacheSqlLimit
vot.datasource-props.use-server-prepare-statements=useServerPrepStmts

# Chargement des données au démarrage de l'application avec Spring JDBC initializer (démarche non programmatique)
vot.datasource-props.initialization-mode=ALWAYS   
#vot.datasource-props.initialization-mode=NEVER
vot.datasource-props.init-schema=classpath*:db/h2/schema-test-h2.sql
vot.datasource-props.init-data=classpath*:db/h2/data-test-h2.sql
vot.datasource-props.init-continue-on-error=false

# -------------------------------------------------------------------------
# Charger les données au démarrage avec Spring JDBC initializer
# valeurs possibles pour le mode d'initialisation : ALWAYS, EMBEDDED, NEVER
#spring.datasource.initialization-mode=always
#spring.datasource.initialize=true
#spring.datasource.data=classpath:script1.sql, classpath:script2.sql
#spring.datasource.schema=classpath:/schema.sql
#spring.datasource.continue-on-error=true
# --------------------------------------------------------------------------

# --------------------------------------------------------------------------
# Charger les données au démarrage avec JPA il faut :
#spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=none

# Pour charger les données au démarrage avec Hibernate il faut :
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.properties.hibernate.hbm2ddl.import_files=script1.sql, script2.sql
# -----------------------------------------------------------------------------

# JPA Hibernate specific configs
vot.jpa-hibernate-props.database-name=H2
vot.jpa-hibernate-props.dialect=org.hibernate.dialect.H2Dialect
vot.jpa-hibernate-props.show_sql=true
vot.jpa-hibernate-props.format_sql=true
vot.jpa-hibernate-props.use_sql=true
vot.jpa-hibernate-props.use_sql_comments=true
vot.jpa-hibernate-props.bytecode_use_reflection_optimizer=false
vot.jpa-hibernate-props.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
vot.jpa-hibernate-props.use-second-level-cache=false
vot.jpa-hibernate-props.generate-statistics=false
vot.jpa-hibernate-props.use-reflection-optimizer=false
## Hibernate ddl auto : create |update |validate |create-drop |drop |none (valeur par défaut pour les bases de données non intégrées)
vot.jpa-hibernate-props.ddl-auto=update
vot.jpa-hibernate-props.enable_lazy=true
vot.jpa-hibernate-props.hbm2ddl-import-files=script1.sql, script2.sql
vot.jpa-hibernate-props.generate-ddl=true

# ---------------------------------------------------------------
# Pour charger les données au démarrage avec Spring JDBC initializer
#spring.jpa.hibernate.ddl-auto=none
# ---------------------------------------------------------------
# Initialiser le pool de connections  avec Hikari
vot.hikari-props.minimum-idle=5
vot.hikari-props.maximum-pool-size=20
vot.hikari-props.idle-timeout=30000
vot.hikari-props.pool-name=JwtRestSecureServerCPTest
vot.hikari-props.max-lifetime=2000000
vot.hikari-props.connection-timeout=30000

# Customisation des propriétés de la DS pour le gestionnaire de pools
vot.hikari-props.cache-prepare-statements=true
vot.hikari-props.prepare-statement-cache-size=250
vot.hikari-props.prepare-statement-cache-sql-limit=2048
vot.hikari-props.use-server-prepare-statements=true